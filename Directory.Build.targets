<Project>
  <ItemGroup Condition="$(IsPackable)">
    <None Update="$(MSBuildProjectDirectory)/README.md" Pack="true" PackagePath="/" />
    <None Include="$(MSBuildProjectDirectory)/Build/**" Pack="true" PackagePath="build/%(RecursiveDir)" />
    <None Include="$(MSBuildProjectDirectory)/Sdk/**" Pack="true" PackagePath="sdk/%(RecursiveDir)" />
    <None Include="$(MSBuildProjectDirectory)/Build/**" Pack="true" PackagePath="sdk/%(RecursiveDir)" />
  </ItemGroup>

  <ItemGroup Condition="$(IsPackable)">
    <PackageReference Include="Linkoid.Build.NuGetPushLocal" Version="2.0.0" PrivateAssets="all" />
  </ItemGroup>

  <Target Name="GetPackage"
        DependsOnTargets="$(PackDependsOn)"
        Returns="@(_GetPackageOutput)"
        Condition="'$(IsPackable)' == 'true'">
    <ItemGroup>
      <_GetPackageOutput Include="@(NuGetPackOutput->WithMetadataValue('Extension', '.nupkg'))">
        <PackageId>$(PackageId)</PackageId>
        <PackageVersion>$(PackageVersion)</PackageVersion>
      </_GetPackageOutput>
    </ItemGroup>
  </Target>

  <Target Name="_ValidatePackageForRelease"
          Condition="'$(IsPackable)' == 'true'">
    <Error Condition="$(Configuration) != 'Release'" Text="Cannot push package when Configuration is not 'Release'" />
    <Error Condition="!$(PackageId.StartsWith('Linkoid.Repo.'))" Text="PackageId does not start with 'Linkoid.Repo.'" />
    <Error Condition="!Exists(@(None->WithMetadataValue('Filename', 'README')))" Text="Missing the README" />
    <Error Condition="'$(Description)' == ''" Text="Missing Description" />
  </Target>

  <Target Name="NuGetPush"
          DependsOnTargets="_ValidatePackageForRelease;GetPackage"
          Returns="@(_NuGetPushedPackages)"
          Condition="'$(IsPackable)' == 'true'">
    <PropertyGroup>
      <NuGetPushSource Condition="'$(NuGetPushSource)' == ''">$(DefaultPushSource)</NuGetPushSource>
      <NuGetPushSource Condition="'$(NuGetPushSource)' == ''">nuget.org</NuGetPushSource>
      <_NuGetPushApiKeyArgs Condition="'$(NuGetPushApiKey)' != ''">--api-key $(NuGetPushApiKey)</_NuGetPushApiKeyArgs>
    </PropertyGroup>
    <Exec Command="dotnet nuget push @(_GetPackageOutput) --source $(NuGetPushSource) --skip-duplicate --force-english-output $(_NuGetPushApiKeyArgs)"
          ContinueOnError="true"
          ConsoleToMsBuild="true">
      <Output TaskParameter="ConsoleOutput" ItemName="_NuGetPushConsoleOutput"/>
    </Exec>

    <Message Text="@(ConsoleOutput, '\n')" Importance="high" />

    <ItemGroup>
      <_NuGetPushPasses Include="@(_NuGetPushConsoleOutput)" Condition="'%(_NuGetPushConsoleOutput.Identity)' == 'Your package was pushed.'" />
      
      <_NuGetPushFails Include="@(_NuGetPushConsoleOutput)"
                       Condition="$([System.String]::new('%(_NuGetPushConsoleOutput.Identity)').Contains('already exists at feed'))">
        <PackagePath>$(
          [System.String]::new("%(_NuGetPushConsoleOutput.Identity)")
          .Substring(9)
          .Split("'")[0]
        )</PackagePath>
      </_NuGetPushFails>

      <_NuGetPushedPackages Include="@(_GetPackageOutput)" Exclude="@(_NuGetPushFails->'%(PackagePath)')">
        <PackageSource>$(NuGetPushSource)</PackageSource>
      </_NuGetPushedPackages>
    </ItemGroup>

    <PropertyGroup>
      <NuGetPushPushedPackages Condition="'@(_NuGetPushPasses)' != ''">true</NuGetPushPushedPackages>
      <NuGetPushPushedPackages Condition="'@(_NuGetPushPasses)' == ''">false</NuGetPushPushedPackages>
    </PropertyGroup>
    
  </Target>
  
</Project>